'''
software_architecture.txt

created: Oct 2021
by: Morgan Marino
description: "Within the context of your chosen design paradigm, describe the software architecture of your prototype" -Project 3.pdf
'''
Software Architecture:
        The software architecture that we mainly used was Peer-to-Peer (P2P) Architecture. This type splits work equally amongst team members and uses something to share their solutions. Our team tried to equally split the work for Project 3, but keeping in mind that our project idea is advanced and not everyone may be experts at our language, graphics, and so on. For example, our pygame experts are mainly focusing on integrating the efficiency of pygame graphics into the framework built by our Python pros. Our team members that have strong technical writing skills were put in charge of overseeing documentation, including this short response. In the event that one of our team members were to become unreliable (tech failures, emergencies, etc.), we are lucky to have 4 other members that can split that person's job and continue to complete Project 3. In other words, the unexpected loss of one of our members can be easily made up, which is an advantage to P2P architecture.
        We share all of our edits through Github, where we can see each other's contributions and identify where their coding time would be the most productive. Github used in this way also eliminates a large loss of files because of it's reliability, as well as it's feature to clone to local drives (so, hypothetically, if Github crashed, one of us would have a local version that we could recover!)
        Another aspect of P2P Architecture is that peers act as both "suppliers and consumers" (from lecture on 10-4). Of course, our team acts as the suppliers by coding this project, but we also are the consumers, as we run our code/play the game intermittently throughout Project 3 and must act as the consumer of Project 3 before beginning to supply more code for Project 4.
