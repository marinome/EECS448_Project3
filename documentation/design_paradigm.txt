'''
design_paradigm.txt

created: Oct 2021
by: Morgan Marino
description: "Identify the design paradigm you (i.e., the team) chose for your prototype and explain why you chose that paradigm" -Project 3.pdf
'''
Design Paradigm:
        As we began our project, the 5 of us identified large needs and functions for our code, such as a board creator, an end-game function, and a length adder function. We used Top-Down Functional Decomposition to break down the larger idea of a Snake Game into possible classes and methods we could implement to organize our code. After we had the initial framework down, we then defined our classes with it's functions and began to get more specific with our needs for each part.
	Quickly after the conception of our idea, however, we realized it would be best to implement pygame, a software that assists Python with running graphics, into our program. With this addition, we knew we wanted to utilize pygame and all it has to offer, so we had to transition from Top-Down Functional Decomposition to Aspect-Oriented Design. We were filling patches around what processes pygame can provide us and I feel some of us are using our coding time to simply identify problems and code, instead of a more chronological approach that Top-Down Functional Decomposition supports.
         At this point in our code (about 75% finished), we are continuing our use of Aspect-Oriented Design in a different way. Instead of filling patches from importing pygame syntaxes, we are filling patches in our original coding. For example, we will run the code, identify errors, properly document them, and investigate to find where refactoring would best benefit our program. Doing it this way ensures that all 5 of us can contribute at our comfort level coding-wise, as well as the fact that encourages collaboration and communication amongst our team.
